generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(uuid())
  username               String
  profilePhoto           String?
  email                  String   @unique
  password               String
  roleId                 Int      @default(1)
  isInformationCompleted Boolean  @default(false)
  version                Int      @default(1)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  role             Role              @relation(fields: [roleId], references: [id])
  applicantProfile ApplicantProfile?
  companyProfile   CompanyProfile?
  socialMedia      SocialMedia[]
  resumes          Resume[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Location {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicantProfiles ApplicantProfile[]
  companyProfiles   CompanyProfile[]
  jobs              Job[]
}

model ApplicantProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  fullName    String
  phone       String
  address     String?
  locationId  String?
  description String?
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user                 User?                  @relation(fields: [userId], references: [id])
  location             Location?              @relation(fields: [locationId], references: [id])
  educations           ApplicantEducation[]
  experiences          ApplicantExperience[]
  applications         Application[]
  skills               ApplicantSkill[]
  ApplicantJobCategory ApplicantJobCategory[]
  Review               Review[]
}

model Resume {
  id        String   @id @default(uuid())
  userId    String
  filePath  String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model CompanyProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  companyName String
  phone       String
  website     String?
  address     String?
  locationId  String?
  description String?
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
  jobs     Job[]
  Review   Review[]
}

model SocialMedia {
  id        String   @id @default(uuid())
  userId    String
  link      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model JobCategory {
  id          String   @id @default(uuid())
  industry    String
  description String?
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs                 Job[]
  ApplicantJobCategory ApplicantJobCategory[]
}

model ApplicantJobCategory {
  id          String   @id @default(uuid())
  applicantId String
  industryId  String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant   ApplicantProfile @relation(fields: [applicantId], references: [id])
  jobCategory JobCategory      @relation(fields: [industryId], references: [id])
}

model Skill {
  id          String   @id @default(uuid())
  name        String
  description String?
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicantSkills ApplicantSkill[]
  JobSkill        JobSkill[]
}

model ApplicantSkill {
  id          String   @id @default(uuid())
  applicantId String
  skillId     String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant ApplicantProfile @relation(fields: [applicantId], references: [id])
  skill     Skill            @relation(fields: [skillId], references: [id])
}

model ApplicantEducation {
  id             String    @id @default(uuid())
  applicantId    String
  schoolName     String
  degree         String
  fieldOfStudy   String?
  description    String?
  startDate      DateTime
  endDate        DateTime?
  stillAttending Boolean
  version        Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  applicant ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model ApplicantExperience {
  id               String    @id @default(uuid())
  applicantId      String
  companyName      String
  location         String?
  title            String
  description      String?
  jobType          String
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean
  version          Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  applicant ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model Job {
  id            String    @id @default(uuid())
  companyId     String
  title         String
  jobCategoryId String
  locationId    String
  type          JobType
  description   String
  requirements  String
  numOfPosts    Int
  salary        Float
  address       String?
  status        JobStatus
  version       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company      CompanyProfile @relation(fields: [companyId], references: [id])
  category     JobCategory    @relation(fields: [jobCategoryId], references: [id])
  location     Location       @relation(fields: [locationId], references: [id])
  applications Application[]
  skills       JobSkill[]
}

model JobSkill {
  id        String   @id @default(uuid())
  jobId     String
  skillId   String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job   Job   @relation(fields: [jobId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])
}

model Application {
  id          String            @id @default(uuid())
  jobId       String
  applicantId String
  status      ApplicationStatus
  resumeId    String
  version     Int
  appliedAt   DateTime          @default(now())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  job       Job              @relation(fields: [jobId], references: [id])
  applicant ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model Review {
  id          String   @id @default(uuid())
  companyId   String
  applicantId String
  rating      Float
  comment     String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company   CompanyProfile   @relation(fields: [companyId], references: [id])
  applicant ApplicantProfile @relation(fields: [applicantId], references: [id])
}

enum JobType {
  Remote
  OnSite
  Hybrid
}

enum JobStatus {
  Open
  Close
}

enum ApplicationStatus {
  Pending
  Seen
  Accepted
  Rejected
}
