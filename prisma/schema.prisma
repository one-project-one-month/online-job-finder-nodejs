generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobType {
  Remote
  OnSite
  Hybrid
}

enum JobStatus {
  Open
  Close
}

enum ApplicationStatus {
  Pending
  Seen
  Accepted
  Rejected
}

model Role {
   id      String   @id @default(uuid())

  name      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model User {
  id                     String   @id @default(uuid())
  username               String
  profilePhoto           String
  email                  String
  password               String
  roleId                 Int
  isInformationCompleted Boolean
  version                Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  role                   Role     @relation(fields: [roleId], references: [id])
  applicantProfile       ApplicantProfile?
  companyProfile         CompanyProfile?
  socialMedia            SocialMedia[]
  resumes                Resume[]
}

model Location {
  id                 String   @id @default(uuid())
  name               String   @unique
  description        String
  version            Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  applicantProfiles  ApplicantProfile[]
  companyProfiles    CompanyProfile[]
  jobs               Job[]
}

model ApplicantProfile {
  id                      String   @id @default(uuid())
  userId                  String
  fullName                String
  phone                   String
  address                 String
  locationId              String
  description             String
  version                 Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user                    User     @relation(fields: [userId], references: [id])
  location                Location @relation(fields: [locationId], references: [id])
  applicantEducations     ApplicantEducation[]
  applicantExperiences    ApplicantExperience[]
  applications            Application[]
  applicantSkills         ApplicantSkill[]
  applicantJobCategories  ApplicantJobCategory[]
  savedJobs               SavedJob[]
  reviews                 Review[]
}

model Resume {
  id         String   @id @default(uuid())
  userId     String
  filePath   String
  version    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User         @relation(fields: [userId], references: [id])
  applications Application[]
}

model CompanyProfile {
  id          String   @id @default(uuid())
  userId      String
  companyName String
  phone       String
  website     String
  address     String
  locationId  String
  description String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  location    Location @relation(fields: [locationId], references: [id])
  jobs        Job[]
  reviews     Review[]
}

model SocialMedia {
  id        String   @id @default(uuid())
  userId    String
  link      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model JobCategory {
  id        String   @id @default(uuid())
  industry  String
  description String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs                   Job[]
  applicantJobCategories ApplicantJobCategory[]
}

model ApplicantJobCategory {
  id          String   @id @default(uuid())
  applicantId String
  industryId  String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant   ApplicantProfile @relation(fields: [applicantId], references: [id])
  jobCategory JobCategory      @relation(fields: [industryId], references: [id])
}

model Skill {
  id         String   @id @default(uuid())
  name       String
  description String
  version    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  applicantSkills ApplicantSkill[]
  jobSkills       JobSkill[]
}

model ApplicantSkill {
  id          String   @id @default(uuid())
  applicantId String
  skillId     String
  version     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant   ApplicantProfile @relation(fields: [applicantId], references: [id])
  skill       Skill            @relation(fields: [skillId], references: [id])
}

model ApplicantEducation {
  id             String   @id @default(uuid())
  applicantId    String
  schoolName     String
  degree         String
  fieldOfStudy   String
  description    String
  startDate      DateTime
  endDate        DateTime?
  stillAttending Boolean
  version        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  applicant      ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model ApplicantExperience {
  id               String   @id @default(uuid())
  applicantId      String
  companyName      String
  location         String
  title            String
  description      String
  jobType          String
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean
  version          Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  applicant      ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model Job {
  id            String    @id @default(uuid())
  companyId     String
  title         String
  jobCategoryId String
  locationId    String
  type          JobType
  description   String
  requirements  String
  numOfPosts    Int
  salary        Decimal
  address       String
  status        JobStatus
  version       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company       CompanyProfile @relation(fields: [companyId], references: [id])
  jobCategory   JobCategory    @relation(fields: [jobCategoryId], references: [id])
  location      Location       @relation(fields: [locationId], references: [id])
  jobSkills     JobSkill[]
  applications  Application[]
  savedJobs     SavedJob[]
}

model JobSkill {
  id        String   @id @default(uuid())
  jobId     String
  skillId   String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job       Job      @relation(fields: [jobId], references: [id])
  skill     Skill    @relation(fields: [skillId], references: [id])
}

model Application {
  id           String   @id @default(uuid())
  jobId        String
  applicantId  String
  status       ApplicationStatus
  resumeId     String
  version      Int
  appliedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  job          Job      @relation(fields: [jobId], references: [id])
  applicant    ApplicantProfile @relation(fields: [applicantId], references: [id])
  resume       Resume   @relation(fields: [resumeId], references: [id])
}

model SavedJob {
  id           String   @id @default(uuid())
  jobId        String
  applicantId  String
  version      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  job          Job      @relation(fields: [jobId], references: [id])
  applicant    ApplicantProfile @relation(fields: [applicantId], references: [id])
}

model Review {
  id           String   @id @default(uuid())
  companyId    String
  applicantId  String
  rating       Float
  comment      String
  version      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      CompanyProfile @relation(fields: [companyId], references: [id])
  applicant    ApplicantProfile @relation(fields: [applicantId], references: [id])
}
